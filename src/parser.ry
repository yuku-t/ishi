class Ishi::Parser
token NUMBER VARIABLE EOL
prechigh
  left "*" "/"
  left "+" "-"
  left ">" ">=" "<" "<=" "=="
  right "="
preclow
start stmt_list
rule
  stmt_list : stmt stmt_list { result = [val[0]] + Array(val[1]) }
            | stmt

  stmt : expr EOL        { result = val[0] }
       | expr ";"        { result = val[0] }
       | expr            { result = val[0] }

  expr : expr "*"  expr    { result = Ishi::AST::MulOp.new([val[0], val[2]]) }
       | expr "/"  expr    { result = Ishi::AST::DivOp.new([val[0], val[2]]) }
       | expr "+"  expr    { result = Ishi::AST::AddOp.new([val[0], val[2]]) }
       | expr "-"  expr    { result = Ishi::AST::SubOp.new([val[0], val[2]]) }
       | expr ">"  expr    { result = Ishi::AST::GtOp.new([val[0], val[2]]) }
       | expr ">=" expr    { result = Ishi::AST::GetOp.new([val[0], val[2]]) }
       | expr "<"  expr    { result = Ishi::AST::LtOp.new([val[0], val[2]]) }
       | expr "<=" expr    { result = Ishi::AST::LetOp.new([val[0], val[2]]) }
       | expr "==" expr    { result = Ishi::AST::EqOp.new([val[0], val[2]]) }
       | variable "=" expr { result = Ishi::AST::AssignExpr.new([val[0], val[2]]) }
       | factor

  factor : "(" expr ")" { result = val[1] }
         | number       { result = val[0] }
         | variable     { result = val[0] }
         | "true"       { result = Ishi::AST::True.new(val[0]) }
         | "false"      { result = Ishi::AST::False.new(val[0]) }

  variable : VARIABLE { result = Ishi::AST::Variable.new(val[0]) }

  number : NUMBER { result = Ishi::AST::NumberLiteral.new(val[0]) }
end

---- header
require "ishi/ast"
require "ishi/lexer"

---- inner
def parse(readable)
  @lexer = Lexer.new(readable)
  AST::StmtList.new(Array(do_parse))
end

def next_token
  @lexer.next_token
end

# vim: set filetype=ruby :
