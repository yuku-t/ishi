#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require "ishi/ast"
require "ishi/lexer"

module Ishi
  class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 24)
def parse(readable)
  @lexer = Lexer.new(readable)
  do_parse
end

def next_token
  @lexer.next_token
end

# vim: set filetype=ruby :
...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     6,     7,     6,     7,     8,     9,     6,     7,     8,
     9,     4,    16,     4,     4,     4,     3,     4,     3,     3,
     3,     4,     3,     6,     7,    11,     3 ]

racc_action_check = [
     1,    15,    15,     1,     1,     1,     1,    10,    10,    10,
    10,     3,    10,     0,     6,     9,     3,     8,     0,     6,
     9,     7,     8,    14,    14,     5,     7 ]

racc_action_pointer = [
    11,     0,   nil,     9,   nil,    25,    12,    19,    15,    13,
     4,   nil,   nil,   nil,    20,    -2,   nil ]

racc_action_default = [
    -8,    -8,    -5,    -8,    -7,    -8,    -8,    -8,    -8,    -8,
    -8,    17,    -1,    -2,    -3,    -4,    -6 ]

racc_goto_table = [
     1,   nil,   nil,    10,   nil,   nil,    12,    13,    14,    15 ]

racc_goto_check = [
     1,   nil,   nil,     1,   nil,   nil,     1,     1,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil ]

racc_goto_default = [
   nil,   nil,     2 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 10, :_reduce_1,
  3, 10, :_reduce_2,
  3, 10, :_reduce_3,
  3, 10, :_reduce_4,
  1, 10, :_reduce_none,
  3, 11, :_reduce_6,
  1, 11, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 17

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  "(" => 7,
  ")" => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "$start",
  "expr",
  "factor" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.ry', 8)
  def _reduce_1(val, _values, result)
     result = Ishi::AST::MulOp.new([val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 9)
  def _reduce_2(val, _values, result)
     result = Ishi::AST::DivOp.new([val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 10)
  def _reduce_3(val, _values, result)
     result = Ishi::AST::AddOp.new([val[0], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 11)
  def _reduce_4(val, _values, result)
     result = Ishi::AST::SubOp.new([val[0], val[2]]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.ry', 14)
  def _reduce_6(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 15)
  def _reduce_7(val, _values, result)
     result = Ishi::AST::NumberLiteral.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Ishi
